"""Create LMDB caches for Sony SID PNG pairs using the generated manifest."""

from __future__ import annotations

import argparse
import json
from collections import defaultdict
from pathlib import Path
from typing import Dict, List

from basicsr.utils.lmdb_util import make_lmdb_from_imgs  # type: ignore


def _group_entries(manifest: List[Dict]) -> Dict[str, List[Dict]]:
    grouped: Dict[str, List[Dict]] = defaultdict(list)
    for entry in manifest:
        grouped[entry["subset"]].append(entry)
    return grouped


def _create_subset_lmdb(
    entries: List[Dict],
    *,
    subset: str,
    short_root: Path,
    long_root: Path,
    output_root: Path,
    compress_level: int,
) -> None:
    if not entries:
        return

    short_lmdb = output_root / f"{subset}_short.lmdb"
    long_lmdb = output_root / f"{subset}_long.lmdb"
    if short_lmdb.exists() or long_lmdb.exists():
        print(f"[Skip] LMDB already exists for subset '{subset}'.")
        return

    short_keys = [entry["short_key"] for entry in entries]
    long_keys = [entry["long_key"] for entry in entries]

    print(f"[Subset: {subset}] Building short LMDB at {short_lmdb}")
    make_lmdb_from_imgs(
        str(short_root),
        str(short_lmdb),
        short_keys,
        short_keys,
        compress_level=compress_level,
    )

    print(f"[Subset: {subset}] Building long LMDB at {long_lmdb}")
    make_lmdb_from_imgs(
        str(long_root),
        str(long_lmdb),
        long_keys,
        long_keys,
        compress_level=compress_level,
    )


def main() -> None:
    parser = argparse.ArgumentParser(description="Create LMDBs for SID dataset splits.")
    parser.add_argument("--manifest", type=Path, required=True, help="Manifest JSON generated by prepare_sid_manifest.")
    parser.add_argument("--short-root", type=Path, required=True, help="Root directory containing short PNG files.")
    parser.add_argument("--long-root", type=Path, required=True, help="Root directory containing long PNG files.")
    parser.add_argument("--output-root", type=Path, required=True, help="Directory to store output LMDBs.")
    parser.add_argument("--compress-level", type=int, default=1, help="PNG compression level for LMDB storage.")
    args = parser.parse_args()

    with args.manifest.open("r", encoding="utf-8") as f:
        manifest = json.load(f)

    grouped = _group_entries(manifest)
    args.output_root.mkdir(parents=True, exist_ok=True)

    for subset, entries in grouped.items():
        _create_subset_lmdb(
            entries,
            subset=subset,
            short_root=args.short_root.resolve(),
            long_root=args.long_root.resolve(),
            output_root=args.output_root.resolve(),
            compress_level=args.compress_level,
        )


if __name__ == "__main__":
    main()
